---
layout: project
title: Learn
---

.row-fluid
  .hero-unit
    %h1 Learn about Infinispan
    %p Distributed in-memory key/value data grid and cache

  %h2
  .row-fluid#equalHeightsB
    .well.span6
      %i.enormous-icon.icon-question-sign.pull-left.icon-2x
      %h3 What is it?
      %p 
      Infinispan is an extremely scalable, highly available key/value data store and data grid platform.
      It is 100% open source, and written in 
      %a{:href => "http://www.oracle.com/technetwork/java/index.html"}Java.
      The purpose of Infinispan is to expose a data structure that is distributed, highly concurrent and designed ground-up to make the most of modern multi-processor and multi-core architectures.
      It is often used as a distributed cache, but also as a NoSQL key/value store or object database.
    .well.span6
      %i.enormous-icon.icon-beaker.pull-left.icon-2x
      %h3 How do I use it?
      %p 
        At its core Infinispan exposes a
        %code Cache 
        interface which extends 
        %code java.util.Map
        It is also optionally is backed by a peer-to-peer network architecture to distribute data efficiently across a cluster of servers.
      %p
        In addition to its core Java API, Infinispan can also be consumed by non-JVM platforms by making use of the
        %a{:href => "/hotrod-clients.html"} Hot Rod
        protocol, for which client libraries for various platforms exist.
  .row-fluid
    .span6
      %i.enormous-icon.icon-dashboard.pull-left.icon-2x
      %h3 Why would I use it?
      %p
        Most people use Infinispan for one of two reasons. Firstly, as a distributed cache.
        Putting Infinispan in front of your database, disk-based NoSQL store or any part of your system that is a bottleneck can greatly help improve performance.
        Often, a simple cache isn't enough - for example if your application is clustered and cache coherency is important to data consistency.
        A
        %i distributed cache
        can greatly help here.
      %p
        The other major use-case is as a NoSQL data store.  In addition to being in memory, Infinispan can also persist data to a more permanent store.  We call this a
        %i cache store.
        Cache stores are pluggable, you can easily write your own, and many already exist for you to use.
        Learn more about cache stores - and existing implementations you can use today - 
        on the 
        %a{:href => "/cache-store-implementations.html"} cache stores
        section of this website.
      %p
        A less common use case is adding clusterability and high availability to frameworks.
        Since Infinispan exposes a distributed data structure, frameworks and libraries that also need to be clustered can easily achieve this by embedding Infinispan and delegating all state management to Infinispan.
        This way, any framework can easily be clustered by letting Infinispan do all the heavy lifting.
      %i.enormous-icon.icon-book.pull-left.icon-2x
      %h3 Where can I learn more?
      %p 
        Visit the
        %a{:href => "/getstarted.html"}Get Started section
        of this website.  Lots of resources - including tutorials, quick start guides, sample code and demos -
        will help get you on your feet in no time.        
    .span6
      %i.enormous-icon.icon-exchange.pull-left.icon-2x
      %h3 What about transactions?
      %p
        A heated topic among many NoSQL engines.  Yes, Infinispan is 
        %b
          %i fully
        transactional.  Infinispan supports both 
        %a{:href => "http://en.wikipedia.org/wiki/Java_Transaction_API", :target => "_NEW"} JTA
        as well as 
        %a{:href => "http://en.wikipedia.org/wiki/X/Open_XA", :target => "_NEW"} XA
        standards, and can participate in distributed transactions brokered by a valid JTA transaction manager.
      %p
        Most distributed data stores find that transactions hurt performance.
        This is true in some cases, but we feel that in many other cases, transactions are necessary for many business applications.
        As such, we support transactions but this is 
        %i optional
        and can be disabled for greater performance.
      %i.enormous-icon.icon-hdd.pull-left.icon-2x
      %h3 Can I use it with Hibernate?
      %p 
        %a{:href => "http://www.hibernate.org/", :target => "_NEW"}Hibernate
        exposes a hook for second-level caching when retrieving data from a relational database.
        Infinispan has a Hibernate second-level cache plug-in to speed up your data lookups from a database.
        Learn more about it 
        %a{:href => "https://docs.jboss.org/author/display/ISPN/Using+Infinispan+as+JPA-Hibernate+Second+Level+Cache+Provider", :target => "_NEW"}here.        

      %i.enormous-icon.icon-search.pull-left.icon-2x
      %h3 Can I perform searches?
      %p
        Yes.  Infinispan's primary form of data retrieval is a key lookup (
        %code Cache.get(key)
        ), but we also support powerful indexing and searching over your dataset.
        Learn more about this 
        %a{:href => "https://docs.jboss.org/author/display/ISPN/Querying+Infinispan", :target => "_NEW"}here.

      %i.enormous-icon.icon-th-large.pull-left.icon-2x
      %h3 What about Map/Reduce?
      %p
        Map/reduce is supported as well, through a flexible and easy-to-use 
        %a{:href => "https://docs.jboss.org/author/display/ISPN/Map+Reduce+framework", :target => "_NEW"}fluent API.
        In addition to map/reduce, Infinispan also supports
        %a{:href => "https://docs.jboss.org/author/display/ISPN/Infinispan+Distributed+Execution+Framework", :target => "_NEW"}distributed code execution
        where you can move your processing into the grid.                

  %h2 Standards
  %h3 JSR 107
  %p
    %a{:href=>"http://jcp.org/en/jsr/detail?id=107"} JSR 107
    (JCACHE: Temporary Caching for Java), is a standard that the Infinispan development team actively participates in and is a part of the expert group.
    Infinispan will implement the JSR 107 APIs once these have been finalized.
    For a preview of the JSR 107 APIs, visit the JSR 107 
    %a{:href=>"https://github.com/jsr107"}on GitHub
    or explore Infinispan's 
    %a{:href=>"https://docs.jboss.org/author/display/ISPN/Using+Infinispan+as+a+JCache+provider"}JSR 107 module.
  %h3 JSR 347
  %p
    %a{:href=>"http://jcp.org/en/jsr/detail?id=347"} JSR 347
    (data grids for the Java Platform) is a nascent standard with a goal to standardize data grid APIs for Java.
    Several ideas for JSR 347 have come from Infinispan, and Infinispan will eventually adopt the JSR 347 standard once it completes.
    To learn more about JSR 347, visit the JSR 347 
    %a{:href=>"https://github.com/datagrids/spec/wiki"} wiki.









